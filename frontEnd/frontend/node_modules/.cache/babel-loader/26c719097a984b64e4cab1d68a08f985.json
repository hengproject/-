{"remainingRequest":"C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\src\\components\\utils\\deepclone.js","dependencies":[{"path":"C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\src\\components\\utils\\deepclone.js","mtime":1631862192671},{"path":"C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1630488426001},{"path":"C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1630488426857},{"path":"C:\\DATA\\projects\\数据库实习\\frontEnd\\frontend\\node_modules\\eslint-loader\\index.js","mtime":1630488425446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzovREFUQS9wcm9qZWN0cy9cdTY1NzBcdTYzNkVcdTVFOTNcdTVCOUVcdTRFNjAvZnJvbnRFbmQvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gIkM6L0RBVEEvcHJvamVjdHMvXHU2NTcwXHU2MzZFXHU1RTkzXHU1QjlFXHU0RTYwL2Zyb250RW5kL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfdHlwZW9mIGZyb20gIkM6L0RBVEEvcHJvamVjdHMvXHU2NTcwXHU2MzZFXHU1RTkzXHU1QjlFXHU0RTYwL2Zyb250RW5kL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMuanMiOwoKLyoqCiAqIOWIpOaWreaYr+WQpuaYr+WfuuacrOaVsOaNruexu+WeiwogKiBAcGFyYW0gdmFsdWUKICovCmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgfHwgdHlwZW9mIHZhbHVlID09PSAibnVtYmVyIiB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gInN5bWJvbCIgfHwgdHlwZW9mIHZhbHVlID09PSAiYm9vbGVhbiI7Cn0KLyoqCiAqIOWIpOaWreaYr+WQpuaYr+S4gOS4qmpz5a+56LGhCiAqIEBwYXJhbSB2YWx1ZQogKi8KCgpmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAiW29iamVjdCBPYmplY3RdIjsKfQovKioKICog5rex5ou36LSd5LiA5Liq5YC8CiAqIEBwYXJhbSB2YWx1ZQogKi8KCgpmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHsKICAvLyDorrDlvZXooqvmi7fotJ3nmoTlgLzvvIzpgb/lhY3lvqrnjq/lvJXnlKjnmoTlh7rnjrAKICB2YXIgbWVtbyA9IHt9OwoKICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUpIHsKICAgIHZhciByZXM7IC8vIOWmguaenOaYr+WfuuacrOaVsOaNruexu+Wei++8jOWImeebtOaOpei/lOWbngoKICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIHZhbHVlOyAvLyDlpoLmnpzmmK/lvJXnlKjmlbDmja7nsbvlnovvvIzmiJHku6zmtYXmi7fotJ3kuIDkuKrmlrDlgLzmnaXku6Pmm7/ljp/mnaXnmoTlgLwKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgcmVzID0gX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlKTsKICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7CiAgICAgIHJlcyA9IF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKTsKICAgIH0gLy8g5qOA5rWL5oiR5Lus5rWF5ou36LSd55qE6L+Z5Liq5a+56LGh55qE5bGe5oCn5YC85pyJ5rKh5pyJ5piv5byV55So5pWw5o2u57G75Z6L44CC5aaC5p6c5piv77yM5YiZ6YCS5b2S5ou36LSdCgoKICAgIFJlZmxlY3Qub3duS2V5cyhyZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICBpZiAoX3R5cGVvZihyZXNba2V5XSkgPT09ICJvYmplY3QiICYmIHJlc1trZXldICE9PSBudWxsKSB7CiAgICAgICAgLy/mraTlpITmiJHku6znlKhtZW1v5p2l6K6w5b2V5bey57uP6KKr5ou36LSd6L+H55qE5byV55So5Zyw5Z2A44CC5Lul5q2k5p2l6Kej5Yaz5b6q546v5byV55So55qE6Zeu6aKYCiAgICAgICAgaWYgKG1lbW9bcmVzW2tleV1dKSB7CiAgICAgICAgICByZXNba2V5XSA9IG1lbW9bcmVzW2tleV1dOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtZW1vW3Jlc1trZXldXSA9IHJlc1trZXldOwogICAgICAgICAgcmVzW2tleV0gPSBiYXNlQ2xvbmUocmVzW2tleV0pOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzOwogIH0KCiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSk7Cn0KCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2YWx1ZSkgewogIHJldHVybiBjbG9uZURlZXAodmFsdWUpOwp9"},{"version":3,"sources":["C:/DATA/projects/数据库实习/frontEnd/frontend/src/components/utils/deepclone.js"],"names":["isPrimitive","value","isObject","Object","prototype","toString","call","cloneDeep","memo","baseClone","res","Array","isArray","Reflect","ownKeys","forEach","key"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,SACE,OAAOA,KAAP,KAAiB,QAAjB,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,QAAOA,KAAP,MAAiB,QAFjB,IAGA,OAAOA,KAAP,KAAiB,SAJnB;AAMD;AAED;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBD,KAAlB,EAAyB;AACvB,SAAOE,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,KAA/B,MAA0C,iBAAjD;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASM,SAAT,CAAmBN,KAAnB,EAA0B;AACxB;AACA,MAAIO,IAAI,GAAG,EAAX;;AAEA,WAASC,SAAT,CAAmBR,KAAnB,EAA0B;AACxB,QAAIS,GAAJ,CADwB,CAExB;;AACA,QAAIV,WAAW,CAACC,KAAD,CAAf,EAAwB;AACtB,aAAOA,KAAP,CADsB,CAEtB;AACD,KAHD,MAGO,IAAIU,KAAK,CAACC,OAAN,CAAcX,KAAd,CAAJ,EAA0B;AAC/BS,MAAAA,GAAG,sBAAOT,KAAP,CAAH;AACD,KAFM,MAEA,IAAIC,QAAQ,CAACD,KAAD,CAAZ,EAAqB;AAC1BS,MAAAA,GAAG,qBAAQT,KAAR,CAAH;AACD,KAVuB,CAYxB;;;AACAY,IAAAA,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,EAAqBK,OAArB,CAA6B,UAACC,GAAD,EAAS;AACpC,UAAI,QAAON,GAAG,CAACM,GAAD,CAAV,MAAoB,QAApB,IAAgCN,GAAG,CAACM,GAAD,CAAH,KAAa,IAAjD,EAAuD;AACrD;AACA,YAAIR,IAAI,CAACE,GAAG,CAACM,GAAD,CAAJ,CAAR,EAAoB;AAClBN,UAAAA,GAAG,CAACM,GAAD,CAAH,GAAWR,IAAI,CAACE,GAAG,CAACM,GAAD,CAAJ,CAAf;AACD,SAFD,MAEO;AACLR,UAAAA,IAAI,CAACE,GAAG,CAACM,GAAD,CAAJ,CAAJ,GAAiBN,GAAG,CAACM,GAAD,CAApB;AACAN,UAAAA,GAAG,CAACM,GAAD,CAAH,GAAWP,SAAS,CAACC,GAAG,CAACM,GAAD,CAAJ,CAApB;AACD;AACF;AACF,KAVD;AAWA,WAAON,GAAP;AACD;;AAED,SAAOD,SAAS,CAACR,KAAD,CAAhB;AACD;;AACD,eAAe,UAAUA,KAAV,EAAiB;AAC9B,SAAOM,SAAS,CAACN,KAAD,CAAhB;AACD","sourcesContent":["/**\n * 判断是否是基本数据类型\n * @param value\n */\nfunction isPrimitive(value) {\n  return (\n    typeof value === \"string\" ||\n    typeof value === \"number\" ||\n    typeof value === \"symbol\" ||\n    typeof value === \"boolean\"\n  );\n}\n\n/**\n * 判断是否是一个js对象\n * @param value\n */\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n\n/**\n * 深拷贝一个值\n * @param value\n */\nfunction cloneDeep(value) {\n  // 记录被拷贝的值，避免循环引用的出现\n  let memo = {};\n\n  function baseClone(value) {\n    let res;\n    // 如果是基本数据类型，则直接返回\n    if (isPrimitive(value)) {\n      return value;\n      // 如果是引用数据类型，我们浅拷贝一个新值来代替原来的值\n    } else if (Array.isArray(value)) {\n      res = [...value];\n    } else if (isObject(value)) {\n      res = { ...value };\n    }\n\n    // 检测我们浅拷贝的这个对象的属性值有没有是引用数据类型。如果是，则递归拷贝\n    Reflect.ownKeys(res).forEach((key) => {\n      if (typeof res[key] === \"object\" && res[key] !== null) {\n        //此处我们用memo来记录已经被拷贝过的引用地址。以此来解决循环引用的问题\n        if (memo[res[key]]) {\n          res[key] = memo[res[key]];\n        } else {\n          memo[res[key]] = res[key];\n          res[key] = baseClone(res[key]);\n        }\n      }\n    });\n    return res;\n  }\n\n  return baseClone(value);\n}\nexport default function (value) {\n  return cloneDeep(value);\n}\n"]}]}